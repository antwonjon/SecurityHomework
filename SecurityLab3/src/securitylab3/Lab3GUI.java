/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package securitylab3;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author AJ
 */
public class Lab3GUI extends javax.swing.JFrame {

    //dimensions of grid
    static final int width = 100;
    static final int height = 100;
    //total number of squares
    static final int GRID = width * height;
    static int ticker = 0;

    //computer width 
    private static final int COMP_WIDTH = 5;
    private static final int COMP_HEIGHT = 5;

    private static BufferedImage displayImage;
    private static ImageIcon white = new ImageIcon("images/white.png");
    private static ImageIcon black = new ImageIcon("images/black.png");
    private static ImageIcon orange = new ImageIcon("images/orange.png");
    private static ImageIcon red = new ImageIcon("images/red.png");
    private static ImageIcon green = new ImageIcon("images/green.png");

    static ComputerStats[][] grid = new ComputerStats[width][height];

    /**
     * Creates new form Lab3GUI
     */
    public Lab3GUI() {
        initComponents();
        jPanel1.setBackground(Color.black);

    }

    private static int totalReg, totalVul, totalInf, totalReinf, totalDead = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        vulnerableInput = new javax.swing.JTextField();
        vulnerableLabel = new javax.swing.JLabel();
        probabilityInput = new javax.swing.JTextField();
        infectInput = new javax.swing.JTextField();
        probabilityLabel = new javax.swing.JLabel();
        infectLabel = new javax.swing.JLabel();
        displayPanel = new javax.swing.JPanel();
        simulateButton = new javax.swing.JButton();
        startOverButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Worm Simulator Lab 3");

        vulnerableInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vulnerableInputActionPerformed(evt);
            }
        });

        vulnerableLabel.setText("Number of Vulnerable Computers (<10,000)");

        probabilityLabel.setText("Probability of Infection (0.0 - 1.0)");

        infectLabel.setText("Number of computers each infected computer can infect");

        displayPanel.setPreferredSize(new java.awt.Dimension(650, 650));

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );

        simulateButton.setText("Simulate");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        startOverButton.setText("Restart");
        startOverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startOverButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Round Number");

        jLabel2.setText("Total Vulnerable");

        jLabel3.setText("Total Regular");

        jLabel4.setText("Total Infected");

        jLabel5.setText("Total Reinfected");

        jLabel6.setText("Total dead");

        jLabel13.setFont(new java.awt.Font("Berlin Sans FB", 2, 18)); // NOI18N
        jLabel13.setText("Results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(89, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vulnerableInput, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(probabilityInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vulnerableLabel)
                            .addComponent(probabilityLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(infectInput)
                            .addComponent(simulateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infectLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(startOverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vulnerableLabel)
                    .addComponent(infectInput, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vulnerableInput, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(probabilityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startOverButton)
                        .addComponent(simulateButton))
                    .addComponent(probabilityLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {infectInput, simulateButton, startOverButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vulnerableInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vulnerableInputActionPerformed

    }//GEN-LAST:event_vulnerableInputActionPerformed

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed

        do {
            if (ticker == 0) {
                totalVul = Integer.parseInt(vulnerableInput.getText());
                initializeGrid();
                ticker++;
            } else if (evt.getActionCommand().equals("Simulate")) {
                int inf = totalInf;
                for (int i = 0; i < inf; i++) {
                    infectOtherComputers(Double.parseDouble(probabilityInput.getText()), Integer.parseInt(infectInput.getText()));
                }
                ticker++;
            }
            print();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Lab3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } while (totalReinf < totalVul && totalDead < totalVul);
        // TODO add your handling code here:
    }//GEN-LAST:event_simulateButtonActionPerformed

    private void startOverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startOverButtonActionPerformed
        if (evt.getActionCommand().equals("Restart")) {
            totalReinf = 0;
            totalDead = 0;
            ticker = 0;
            initializeGrid();
            print();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_startOverButtonActionPerformed
   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lab3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lab3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lab3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lab3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Lab3GUI().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel displayPanel;
    private javax.swing.JTextField infectInput;
    private javax.swing.JLabel infectLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField probabilityInput;
    private javax.swing.JLabel probabilityLabel;
    private javax.swing.JButton simulateButton;
    private javax.swing.JButton startOverButton;
    private javax.swing.JTextField vulnerableInput;
    private javax.swing.JLabel vulnerableLabel;
    // End of variables declaration//GEN-END:variables
    private static BufferedImage printComps() {
        BufferedImage di = new BufferedImage(width * COMP_WIDTH, height * COMP_HEIGHT, BufferedImage.TYPE_INT_ARGB);
        Graphics g2d = di.createGraphics();

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (grid[i][j].getVulnerability() == false) {    // draw white regular computer
                    g2d.drawImage(white.getImage(), j * COMP_WIDTH, i * COMP_HEIGHT, null, null);
                } else if (grid[i][j].getVulnerability() == true) {   // draw computers than can be infected
                    g2d.drawImage(black.getImage(), j * COMP_WIDTH, i * COMP_HEIGHT, null, null);
                    if (grid[i][j].getInfected() == 1) {//infected computers
                        g2d.drawImage(orange.getImage(), j * COMP_WIDTH, i * COMP_HEIGHT, null, null);
                    } else if (grid[i][j].getInfected() > 1 && grid[i][j].getIsDead() == false) { //reinf computers
                        g2d.drawImage(red.getImage(), j * COMP_WIDTH, i * COMP_HEIGHT, null, null);
                    } else if (grid[i][j].getIsDead() == true) { //dead computers
                        g2d.drawImage(green.getImage(), j * COMP_WIDTH, i * COMP_HEIGHT, null, null);
                    }
                }
            }
        }
        return di;
    }

    public void print() {
        Graphics2D g2d = (Graphics2D) displayPanel.getGraphics();
        displayImage = printComps();
        g2d.drawImage(displayImage, null, 0, 0);
        jLabel7.setText(Integer.toString(ticker));
        jLabel8.setText(Integer.toString(totalVul));
        jLabel9.setText(Integer.toString(totalReg));
        jLabel10.setText(Integer.toString(totalInf));
        jLabel11.setText(Integer.toString(totalReinf));
        jLabel12.setText(Integer.toString(totalDead));
    }

    private static void initializeGrid() {
        ComputerStats newComp;

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                //makes a clean grid of vulnerable computers   
                newComp = new ComputerStats();
                grid[i][j] = newComp;
            }
        }
        //randomly assign certain computers to have invulnerability
        Random rand = new Random();
        int j, k;
        // infect first computer with worm
        // intialize the counters
        j = rand.nextInt(width);
        k = rand.nextInt(height);
        grid[j][k].addInfected();
        totalInf = 1;
        //its 999 because the 1st one is already infected
        totalReg = (GRID - 1) - totalVul;

        for (int i = 0; i < ((GRID - 1) - totalVul); i++) {
            //get random coordinates
            j = rand.nextInt(width);
            k = rand.nextInt(height);

            if (grid[j][k].getVulnerability() == true && grid[j][k].getInfected() == 0) {
                grid[j][k].setInvulnerable();
            } //redo that round if you found a computer that was invulnerable 
            else {
                i--;
            }
        }

    }

    private static void infectOtherComputers(double prob, int infect) {
        Random rand = new Random();
        int j, k;

        for (int i = 0; i < infect; i++) {
            j = rand.nextInt(width);
            k = rand.nextInt(height);

            if (grid[j][k].getVulnerability() == true && new Random().nextDouble() <= prob) {
                if (grid[j][k].getInfected() > 100 && grid[j][k].getIsDead()==false) {
                    grid[j][k].setIsDead();
                    totalDead++;
                    totalInf--;
                } else {
                    grid[j][k].addInfected();
                    if (grid[j][k].getInfected() > 1 && grid[j][k].hasBeenCounted()==false) {
                        grid[j][k].setBeenCounted();
                        totalReinf++;
                    } else if(grid[j][k].getInfected() == 1) {
                        totalInf++;
                    }
                }
            }
        }
    }
}
